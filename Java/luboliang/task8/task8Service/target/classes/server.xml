<?xml version="1.0" encoding="UTF-8"?>
        <beans xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"
               xmlns:context="http://www.springframework.org/schema/context"
               xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 数据库连接池 -->
    <!--<import resource="classpath:spring/redis-context.xml"/>-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.jnshu.model" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:/mapper/*.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.jnshu.MyBatis" />
    </bean>
    <!--<bean id="messageSource"-->
          <!--class="org.springframework.context.support.ResourceBundleMessageSource">-->
        <!--<property name="basenames">-->
            <!--<list>-->
                <!--<value>message</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="useCodeAsDefaultMessage" value="false" />-->
        <!--<property name="defaultEncoding" value="UTF-8" />-->
        <!--<property name="cacheSeconds" value="60" />-->
    <!--</bean>-->
    <context:component-scan base-package="com.jnshu"/>
    <!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->


    <!-- 扫描包基础目录 -->
    <context:component-scan base-package="com.jnshu"/>

    <!-- 配置RMI -->
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="serviceName" value="student"></property>
        <property name="service" ref="studentImpl"></property>
        <property name="serviceInterface" value="com.jnshu.service.StudentService"></property>
        <property name="registryPort" value="1199"></property>
    </bean>
    <!-- 配置RMI -->
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter" >
        <property name="serviceName" value="profession"></property>
        <property name="service" ref="professionImpl"></property>
        <property name="serviceInterface" value="com.jnshu.service.ProfessionService"></property>
        <property name="registryPort" value="1199"></property>
    </bean>
</beans>